require 'activefacts/fim/LexicalRules'

module ActiveFacts
  module FIM
    grammar FIM
      include LexicalRules

      rule top
	(definition
	)+
      end

      rule definition
	s
	node:(
	  factType
	  / valuesOf
	  / alternatePredicate
	  / roleNaming
	  / mandatory
	  / unique
	  / identification
	  / externalUnique
	  / externalIdentification
	  / frequency
	  / subtype
	  / subset
	  / exclusive
	  / equality
	  / typeCardinality
	  / roleCardinality
	  / objectifies
	  / comparison
	  / ringConstraint
	  / subTypeRule
	  / factTypeRule
	  / joinPath
	)
	{
	  def ast
	    return node.text_value  # REVISIT: Finish implementing ast
	  end
	}
      end

      rule factType
	'FactType' s '(' s predicate s '(' s typename ( sep typename )* ')' s ')' s
      end

      rule alternatePredicate
	# REVISIT: Include comma between roleNumbers for consistency though it's not strictly needed?
	# REVISIT: Allow eliding the roleNumber list in the case of reversing a binary?
	'AlternatePredicate' s '(' s predicate comma predicate ( '(' s (roleNumber s)+ ')' s )? ')' s
      end

      rule roleNaming
	'RoleNaming' s '(' s predicateRole sep roleName ')' s
      end

      rule mandatory
	'Mandatory' s '(' s typename sep predicateRole ( sep predicateRole )* ')' s
      end

      rule unique
	'Unique' s '(' s predicateRole ( sep predicateRole )* ')' s
      end

      rule identification
	'Identification' s '(' s typename sep predicateRole '(' s predicateRole ( sep predicateRole )* ')' s ')' s
      end

      rule externalUnique
	'ExternalUnique' s '(' s predicateRole ( sep predicateRole )* ')' s
      end

      rule externalIdentification
	'ExternalIdentification' s '(' s typename '(' s predicateRole ( sep predicateRole )* ')' s ')' s
      end

      rule frequency
	# For Frequency, the predicates must be all the same
	# For ExternalFrequency, the predicates may be all different
	'External'? 'Frequency' s '(' s predicateRole ( sep predicateRole )* frequencyRange ')' s
      end

      rule frequencyRange
	'(' s
	  ( naturalNumber ( '..' s naturalNumber? )? / '..' s naturalNumber )
	')' s
      end

      rule subtype
	'Subtype' s '(' s typename sep typename ')' s
      end

      rule subtypeConstrained
	('Exclusive' / 'Exhaustive') 'Subtype' 's'? s
	'(' s '(' s typename ( sep typename )* ')' s typename ')' s
      end

      rule subset
	'Subset' s '(' s rolePairs+ ')' s
      end

      rule exclusive
	'Exclusive' s '(' s rolePairs+ ')' s
      end

      rule equality
	'Equal' s '(' s rolePairs+ ')' s
      end

      rule rolePairs
	( '(' s predicateRole sep predicateRole ')' s )+
      end

      rule typeCardinality
	'TypeCardinality' s '(' s typename ','? s cardinalityRange ')' s
      end

      rule roleCardinality
	'RoleCardinality' s '(' s predicateRole ','? s cardinalityRange ')' s
      end

      rule cardinalityRange
	'(' (naturalNumber / zero) '..' s (naturalNumber / infinity)? ')' s
      end

      rule objectifies
	'Objectifies' s '(' typename sep predicate s ')'
      end

      rule valuesOf
	'ValuesOf' s '(' (typename / predicateRole ) '(' s range+ ')' s ')' s
      end

      rule comparison
	comparisonOperator s '(' predicateRole sep predicateRole ')' s
      end

      rule comparisonOperator
	equalTo / notEqualTo /
	lessOrGreater / lessThan / lessOrEqual /
	greaterOrEqual / greaterThan
      end

      rule ringConstraint
	ringConstraintType s '(' s predicateRole predicateRole ')' s
      end

      rule ringConstraintType
	'LocallyReflexive'
	/ 'PurelyReflexive'
	/ 'Irreflexive'
	/ 'Symmetric'
	/ 'Asymmetric'
	/ 'Antisymmetric'
	/ 'Transitive'
	/ 'Intransitive'
	/ 'StronglyIntransitive'
	/ 'Acyclic'
      end

      rule subTypeRule
	'SubType' 'Semi'? 'Rule' s '(' s typename sep path ')' s
      end

      rule factTypeRule
	'FactType' 'Semi'? 'Rule' s '(' s predicate sep path ( sep path )* ')' s
      end

      rule joinPath
	'JoinPath' s '(' s predicate s rolePairs ')' s
      end

      # Precedence in expressions: ~ & v >
      rule path
	pathDisjunction
      end

      rule pathDisjunction
	pathConjunction ( or pathDisjunction )*
      end

      rule pathConjunction
	pathException ( and pathDisjunction )*
      end

      rule pathException
	pathSimple ( except pathException )*
      end

      rule pathSimple
	predicateRole arrow ( lbrack s predicateRole join path rbrack s)+
	/ predicate s # must be a unaryPredicate
	/ typename    # REVISIT: Indistinguishable from simple predicates
	/ lbrace s (literal s)+ rbrace s
	/ variable
	/ variable comparisonOperator term
	/ '(' s path ')' s
      end

      rule term
	literal
	/ variable
	/ functionCall
	/ '(' s pathSimple ')' s    # REVISIT: Add parethesised subexpressions
      end

      rule variable
	'?' id
      end

      rule roleName
	id s
      end

      rule question
	'?' !'?'
      end

      rule predicate
	(id / question) s ( (id / question) s )*
      end

      rule predicateRole
	predicate '.' roleNumber s
      end

      rule roleNumber
	naturalNumber
      end

      rule functionCall
	id lparen s term+ rparen
      end
    end
  end
end
